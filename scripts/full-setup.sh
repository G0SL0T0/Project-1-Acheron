#!/bin/bash

echo "üöÄ –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ Streaming Platform"
echo "=================================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
check_dependencies() {
    echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
    if ! command -v node &> /dev/null; then
        echo "‚ùå Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js 18+"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pnpm
    if ! command -v pnpm &> /dev/null; then
        echo "‚ùå pnpm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é..."
        npm install -g pnpm
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose"
        exit 1
    fi
    
    echo "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    pnpm install
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤
    pnpm -r install
    
    echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_environment() {
    echo "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env.example –µ—Å–ª–∏ .env –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ ! -f .env ]; then
        cp .env.example .env
        echo "üìù –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ:"
        echo "   - JWT_SECRET"
        echo "   - DATABASE_URL"
        echo "   - FRONTEND_URL"
        echo "   - METRICS_API_KEY"
    fi
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤
    if [ ! -f secrets.json ]; then
        echo "üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤..."
        node -e "
        const crypto = require('crypto');
        const secrets = {
            jwtAccessSecret: crypto.randomBytes(64).toString('hex'),
            jwtRefreshSecret: crypto.randomBytes(64).toString('hex'),
            metricsApiKey: crypto.randomBytes(32).toString('hex'),
            encryptionKey: crypto.randomBytes(32).toString('hex'),
            lastRotation: Date.now()
        };
        require('fs').writeFileSync('secrets.json', JSON.stringify(secrets, null, 2));
        "
        echo "‚úÖ –°–µ–∫—Ä–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"
    fi
    
    echo "‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
setup_database() {
    echo "üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    echo "üê≥ –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose up -d db redis
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    until docker-compose exec -T db pg_isready -U streaming; do
        sleep 1
    done
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞
    echo "üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞..."
    cd apps/server
    pnpm prisma generate
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    echo "üìä –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
    pnpm prisma migrate dev
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã–º–∏
    echo "üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã–º–∏..."
    pnpm prisma db seed
    
    cd ../..
    
    echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
}

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
build_project() {
    echo "üèóÔ∏è –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    # –°–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
    echo "üì± –°–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞..."
    cd apps/client
    pnpm build
    
    # –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    echo "üîß –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
    cd ../server
    pnpm build
    
    cd ../..
    
    echo "‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω"
}

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞
start_project() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    docker-compose up -d
    
    echo "‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω"
    echo ""
    echo "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "   - –§—Ä–æ–Ω—Ç–µ–Ω–¥: http://localhost:5173"
    echo "   - –ë—ç–∫–µ–Ω–¥: http://localhost:3000"
    echo "   - API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:3000/api"
    echo "   - Prisma Studio: pnpm prisma:studio (–≤ apps/server)"
    echo ""
    echo "üîë –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"
    echo "   - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin@streaming.local / admin123"
    echo "   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user@streaming.local / user123"
    echo "   - –ê–≤—Ç–æ—Ä: author@streaming.local / author123"
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
main() {
    check_dependencies
    install_dependencies
    setup_environment
    setup_database
    build_project
    start_project
    
    echo ""
    echo "üéâ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
    echo "   –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: docker-compose down"
    echo "   –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: docker-compose restart"
}

# –ó–∞–ø—É—Å–∫
main