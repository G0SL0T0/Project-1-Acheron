import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AllExceptionsFilter } from './common/filters/all-exceptions.filter';
import { TransformInterceptor } from './common/interceptors/transform.interceptor';
import { Logger } from 'nestjs-pino';
import { AppModule } from './app.module';
import { LoggingService } from './common/services/logging.service';
import { SecretRotationService } from './common/services/secret-rotation.service';
import { DastService } from './common/services/dast.service';
import * as fs from 'fs';
import * as https from 'https';
import { httpsOptions } from './common/configs/https.config';

async function bootstrap() {
  const app = await NestFactory.create(AppModule, { 
    bufferLogs: true,
    logger: ['log', 'error', 'warn', 'debug', 'verbose'],
  });

  // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const loggingService = app.get(LoggingService);
  const secretRotationService = app.get(SecretRotationService);
  const dastService = app.get(DastService);

  // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  await loggingService.info('Application starting', 'BOOTSTRAP');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–æ—Ç–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤
  if (secretRotationService.shouldRotate()) {
    await secretRotationService.rotateSecrets();
    await loggingService.info('Secrets rotated', 'SECURITY');
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  dastService.runDependencyCheck().then(result => {
    if (result.success) {
      loggingService.info('Dependency check completed', 'SECURITY', { reportPath: result.reportPath });
    }
  });

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
      transformOptions: {
        enableImplicitConversion: true,
      },
    }),
  );
  
  app.useGlobalFilters(new AllExceptionsFilter());
  app.useGlobalInterceptors(new TransformInterceptor());
  
  // CORS
  app.enableCors({
    origin: process.env.FRONTEND_URL || 'http://localhost:5173',
    credentials: true,
  });
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  app.useLogger(app.get(Logger));

  // Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
  const config = new DocumentBuilder()
    .setTitle('–°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ API')
    .setDescription('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã')
    .setVersion('1.0')
    .addBearerAuth()
    .build();
    
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api', app, document);

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  const port = process.env.PORT || 3000;
  
  if (process.env.NODE_ENV === 'production' && fs.existsSync('./ssl/server.crt')) {
    // –ó–∞–ø—É—Å–∫ —Å HTTPS
    const server = https.createServer(httpsOptions, app.getHttpAdapter().getInstance());
    server.listen(port, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port} (HTTPS)`);
      console.log(`üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: https://localhost:${port}/api`);
    });
  } else {
    // –ó–∞–ø—É—Å–∫ —Å HTTP
    await app.listen(port);
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    console.log(`üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:${port}/api`);
  }

  // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
  await loggingService.info('Application started successfully', 'BOOTSTRAP', { port });
}

bootstrap();